#!/usr/bin/env bash
# terraformsh - Bash wrapper around Terraform
# Copyright (C) 2020-2021 Peter Willis <peterwwillis@gmail.com>

set -e -u -o pipefail
[ "${DEBUG:-0}" = "1" ] && set -x       # set DEBUG=1 to enable tracing
VERSION="0.7"

# ---------------------------------------------------------------------------------------- #
_usage () {
    cat <<EOUSAGE
    terraformsh v$VERSION
    Usage: $0 [OPTIONS] [TFVARS] COMMAND [..]

# About

  Terraformsh makes it easier to run Terraform in automation. It runs common
  Terraform commands for you in order, passing the right arguments as needed.
  You can use configuration files to pre-set options and override them
  via the environment and command-line. And it defaults to good conventions,
  like using .plan files for changes.

# Requirements
 - Bash (v3+)
 - Terraform
 - AWS CLI (only for aws_bootstrap command)

# Usage

  You can specify most options and commands multiple times, as Terraform will allow
  you to pass options multiple times. This allows you to split up your configuration
  among multiple files/paths to keep it DRY.

  The [TFVARS] arguments after [OPTIONS] allows you to pass file paths to Terrraform
  config files. If the filename ends in '*.backend.tfvars' or '*.backend', it will
  be used as a '-b' option. If the filename ends in '*.tfvars.json' or '*.tfvars',
  it will be used as an '-f' option. This way you can use your shell's file globbing
  to select any files in a directory with these file extensions, and they will be
  passed to Terraform with the correct options.

  You can override the following defaults with environment variables, or set
  them in a bash configuration file (\`/etc/terraformsh\`, \`~/.terraformshrc\`,
  \`.terraformshrc\`, \`terraformsh.conf\`):

    TERRAFORM=$TERRAFORM
    TF_PLANFILE=$TF_PLANFILE
    TF_DESTROY_PLANFILE=$TF_DESTROY_PLANFILE
    TF_BOOTSTAP_PLANFILE=$TF_BOOTSTRAP_PLANFILE
    USE_PLANFILE=$USE_PLANFILE
    DEBUG=0
    INHERIT_TFFILES=$INHERIT_TFFILES

  The following can be set in the config file as arrays, or you can set them
  by passing them to \`-E\`, such as \`-E CD_DIRS=(../some-dir/)\`

    VARFILE_ARG=(${VARFILE_ARG[@]})
    CD_DIRS=(${CD_DIRS[@]})
    CMDS=(${CMDS[@]})
    BACKENDVARFILE_ARG=(${BACKENDVARFILE_ARG[@]})
    PLAN_ARGS=(${PLAN_ARGS[@]})
    APPLY_ARGS=(${APPLY_ARGS[@]})
    PLANDESTROY_ARGS=(${PLANDESTROY_ARGS[@]})
    DESTROY_ARGS=(${DESTROY_ARGS[@]})
    REFRESH_ARGS=(${REFRESH_ARGS[@]})
    INIT_ARGS=(${INIT_ARGS[@]})
    IMPORT_ARGS=(${IMPORT_ARGS[@]})
    GET_ARGS=(${GET_ARGS[@]})
    STATE_ARGS=(${STATE_ARGS[@]})

  To use the 'aws_bootstrap' command, pass the '-b FILE' option and make sure the
  file(s) have the following variables:

    bucket          - The S3 bucket your Terraform state will live in
    dynamodb_table  - The DynamoDB table your Terraform state will be managed in

# Examples

 - Run plan, ask for approval, then apply the plan:
    \`\`\`
    \$ $0 \\
      -f ../terraform.tfvars.json \\
      -f override.auto.tfvars.json \\
      -b ../backend.tfvars \\
      -b backend-key.tfvars \\
      -C ../../../rootmodules/aws-infra-region/ \\
      plan \\
      approve \\
      apply
    \`\`\`

 - Run plan using a \`.terraformshrc\` file, and override the PLAN_ARGS array:
    \`\`\`
    \$ $0 \\
      -E 'PLAN_ARGS=("-compact-warnings" "-no-color" "-input=false")' \\
      plan
    \`\`\`

 - Run plan on a module, passing any configs in specific directories:
    \`\`\`
    \$ $0 \\
       -C ../../modules/my-database/ \\
       *.tfvars \\
       *.backend.tfvars \\
       my-database/*.tfvars \\
       my-database/*.backend.tfvars \\
       plan
    \`\`\`

 - Run plan on a module, implicitly loading configuration files from parent directories:
    \`\`\`
    \$ pwd
    /home/vagrant/git/some-repo/env/non-prod/us-east-2/my-database
    \$ echo 'CD_DIRS=(../../../../modules/my-database/)' > terraformsh.conf
    \$ echo 'aws_account_id = "0123456789"' > ../../terraform.sh.tfvars
    \$ echo 'region = "us-east-2"' > ../terraform.sh.tfvars
    \$ echo 'database_name = "some database"' > terraform.sh.tfvars
    \$ $0 plan
    \`\`\`


# Options
    -f FILE           A file passed to Terraform's -var-file option
    -b FILE           A file passed to Terraform's -backend-config option
    -C DIR            Change to directory DIR
    -c file           Specify a '.terraformshrc' configuration file to load
    -E EXPR           Evaluate an expression in bash ('eval EXPR')
    -I                Disables automatically loading any 'terraform.sh.tfvars',
                      'terraform.sh.tfvars.json', or 'backend.sh.tfvars' files 
                      found while recursively searching parent directories.
    -P                Do not use '.plan' files for plan/apply/destroy commands
    -v                Verbose mode
    -h                This help screen

# Commands
    plan              Run init, get, validate, and \`terraform plan -out $TF_PLANFILE\`
    apply             Run init, get, validate, and \`terraform apply $TF_PLANFILE\`
    plan_destroy      Run init, get, validate, and \`terraform plan -destroy -out=$TF_DESTROY_PLANFILE\`
    destroy           Run init, get, validate, and \`terraform apply $TF_DESTROY_PLANFILE\`
    shell             Run init, get, and \`bash -i -l\`
    refresh           Run init, and \`terraform refresh\`
    validate          Run init, get, and \`terraform validate\`
    init              Run clean_modules, and \`terraform init\`
    clean             Remove '.terraform/modules/*', terraform.tfstate files, and .plan files
    clean_modules     Run \`rm -v -rf .terraform/modules/*\`
    approve           Prompts the user to approve the next step, or the program will exit with an error.
    aws_bootstrap     Looks for 'bucket' and 'dynamodb_table' in your '-b' file options.
                      If found, creates the bucket and table and initializes your Terraform state with them.
    import            Run \`terraform import [...]\`
    state             RUn \`terraform state [...]\`
EOUSAGE
    exit 1
}
declare -a TF_COMMANDS=(0.12upgrade 0.13upgrade apply console debug destroy env fmt force-unlock get graph import init login logout output plan providers push refresh show state taint untaint validate version workspace)
declare -a WRAPPER_COMMANDS=(plan_destroy shell clean clean_modules approve aws_bootstrap)

# ---------------------------------------------------------------------------------------- #
# ------------------           functions                       --------------------------- #

_cmd_plan () {
    _cmd_validate
    ( set -x; $TERRAFORM plan "${VARFILE_ARG[@]}" "${PLAN_ARGS[@]}" )
}
_cmd_apply () {
    _cmd_init
    ( set -x; $TERRAFORM apply "${APPLY_ARGS[@]}" ) && rm -f "$TF_PLANFILE"
}
_cmd_plan_destroy () {
    _cmd_validate
    ( set -x; $TERRAFORM plan "${VARFILE_ARG[@]}" -destroy "${PLANDESTROY_ARGS[@]}" )
}
_cmd_destroy () {
    _cmd_init
    ( set -x; $TERRAFORM apply "${DESTROY_ARGS[@]}"  ) && rm -f "$TF_DESTROY_PLANFILE"
}
# Validate doesn't require 'init' to check the .tf files syntax, but it does
# require init once it gets to the providers
_cmd_validate () {
    _cmd_get
    ( set -x; $TERRAFORM validate "${VARFILE_ARG[@]}" )
}
_cmd_get () {
    _cmd_init # 'terraform get' does nothing if we have not initialized terraform
    ( set -x; $TERRAFORM get "${GET_ARGS[@]}" )
}
_cmd_refresh() {
    _cmd_init
    ( set -x; $TERRAFORM refresh "${VARFILE_ARG[@]}" "${REFRESH_ARGS[@]}" )
}
# Note: this line may need to be modified to pipe 'yes no | ' to the beginning 
# of the Terraform command, if you notice any problems with init in the future.
_cmd_init () {
    ( set -x; $TERRAFORM init "${INIT_ARGS[@]}" )
}
_cmd_import () {
    ( set -x; $TERRAFORM import "${VARFILE_ARG[@]}" "${IMPORT_ARGS[@]}" "$@" )
}
_cmd_state () {
    # 'terraform state' takes no options, but its commands do, so we play argument musical chairs
    declare -a _args=() _opts=("$@")
    _cmd=""
    if [ ${#_opts[@]} -gt 0 ] ; then
        _cmd="$1"; shift
        _args+=("${_opts[@]:1}")
    fi
    ( set -x; $TERRAFORM state $_cmd "${STATE_ARGS[@]}" "${_args[@]}" )
}
# The following allows you to do something like 'terraformsh plan shell' to drop
# into a shell in the working directory of the root module to be used, with
# everything ready to run 'terraform' commands (such as 'terraform state list')
_cmd_shell () {
    _cmd_get
    bash -i -l
}
# This is basically in case the directory structure where this runs was changed
# after an initial terraform run. Terraform sucks at cleaning up broken symlinks
# and its modules.json, so unless we want to have a *ton* of complex logic here,
# just blow modules away every time.
_cmd_clean_modules () {
    ( set -x; rm -v -rf .terraform/modules/* )
}
_cmd_clean () {
    _cmd_clean_modules
    ( set -x; rm -vrf "$TF_PLANFILE" "$TF_DESTROY_PLANFILE" .terraform/terraform.tfstate terraform.tfstate || true )
}
_cmd_approve () {
    echo ""
    read -p "Are you SURE you want to apply the above plan? Type 'YES' to apply now: " APPROVE
    if [ "$APPROVE" = "YES" ] ; then
        echo "Approval given; continuing with terraform apply"
    else
        echo "Approval not given; exiting!"
        exit 1
    fi
    echo ""
}
# This function is used to bootstrap a new AWS remote state file.
# You would typically run this in a brand new region, or for a brand new
# root module, to create the initial state file. It will attempt to re-use
# an existing S3 bucket and DynamoDB table, or create them if they don't
# yet exist.
_cmd_aws_bootstrap () {
    _cmd_clean_modules

    # Look though the backend var files for the backend bucket and dynamodb_table
    for varfile in "${BACKENDVARFILE_ARG[@]}" ; do
        BACKEND_BUCKET="$( grep -e "^[[:space:]]*bucket[[:space:]]\+=" < "$varfile" \
            | sed -e 's/^[[:space:]]*bucket[[:space:]]\+=[[:space:]]*//; s/^"//g; s/"$//g' )"
        BACKEND_TABLE="$( grep -e "^[[:space:]]*dynamodb_table[[:space:]]\+=" < "$varfile" \
            | sed -e 's/^[[:space:]]*dynamodb_table[[:space:]]\+=[[:space:]]*//; s/^"//g; s/"$//g' )"
    done

    if [ -z "${BACKEND_BUCKET:-}" ] || [ -z "${BACKEND_TABLE:-}" ] ; then
        echo "$0: Error: make sure 'bucket' and 'dynamodb_table' are set in your backend var files"
        exit 1
    fi

    # Set a local terraform backend
    printf "terraform {\n\tbackend local {}\n}\n" > terraform-backend.tf
    # First remove any existing previous local state
    _cmd_clean
    # Initialize local state
    _cmd_init

    # Attempt to import bucket if it exists
    BUCKET_REGION="$(aws s3api get-bucket-location \
        --bucket "${BACKEND_BUCKET}" --query LocationConstraint --output text \
        || true )"
    if [ -n "$BUCKET_REGION" ] ; then
        echo "$0: Info: importing existing S3 bucket '$BACKEND_BUCKET' ..."
        $TERRAFORM import "${IMPORT_ARGS[@]}" "${VARFILE_ARG[@]}" aws_s3_bucket.terraform_state "$BACKEND_BUCKET"
    else
        echo "$0: Info: Did not find existing S3 bucket '$BACKEND_BUCKET'; creating..."
    fi

    # Attempt to import dynamodb table if it exists
    DYNAMODB_TABLE="$( aws dynamodb list-tables \
        | jq -re "select(.TableNames | index(\"$BACKEND_TABLE\")) | .TableNames[]" || true )"
    if [ -n "$DYNAMODB_TABLE" ] ; then
        echo "$0: Info: importing existing DynamoDB table '$BACKEND_TABLE' ..."
        $TERRAFORM import "${IMPORT_ARGS[@]}" "${VARFILE_ARG[@]}" aws_dynamodb_table.terraform_lock "$BACKEND_TABLE" || true
    else
        echo "$0: Info: Did not find backend table '$BACKEND_TABLE'; creating..."
    fi

    # Plan & Apply to create the dynamodb table and s3 bucket
    $TERRAFORM plan -input=false "${VARFILE_ARG[@]}" \
        -target aws_dynamodb_table.terraform_lock \
        -target aws_s3_bucket.terraform_state \
        -out "$TF_BOOTSTRAP_PLANFILE"
    $TERRAFORM apply -input=false "$TF_BOOTSTRAP_PLANFILE"

    # Set an s3 terraform backend
    printf "terraform {\n\tbackend s3 {}\n}\n" > terraform-backend.tf

    echo "Sleeping 60 seconds before querying bucket again ..."
    sleep 60

    ( set -x ; $TERRAFORM init "${INIT_ARGS[@]}" "${BACKENDVARFILE_ARG[@]}" )
}
_default_vars () {
    # Help load AWS credentials, and silence some messages for automation.
    AWS_SDK_LOAD_CONFIG="${AWS_SDK_LOAD_CONFIG:-1}"
    TF_IN_AUTOMATION="${TF_IN_AUTOMATION:-1}"
    export AWS_SDK_LOAD_CONFIG TF_IN_AUTOMATION

    # Override these to change the name of the plan files
    TF_PLANFILE="${TF_PLANFILE:-terraform.plan}"
    TF_DESTROY_PLANFILE="${TF_DESTROY_PLANFILE:-terraform-destroy.plan}"
    TF_BOOTSTRAP_PLANFILE="${TF_BOOTSTRAP_PLANFILE:-terraform-bootstrap.plan}"

    USE_PLANFILE="${USE_PLANFILE:-1}"
    TERRAFORM="${TERRAFORM:-terraform}"
    PLAN_ARGS=("-input=false")
    APPLY_ARGS=("-input=false")
    PLANDESTROY_ARGS=("-input=false")
    DESTROY_ARGS=("-input=false")
    REFRESH_ARGS=("-input=false")
    INIT_ARGS=("-input=false")
    IMPORT_ARGS=("-input=false")
    GET_ARGS=("-update=true")
    STATE_ARGS=("-input=false")

    INHERIT_TFFILES=1
}
_final_vars () {
    if [ $USE_PLANFILE -eq 1 ] ; then
        PLAN_ARGS+=("-out=$TF_PLANFILE")
        APPLY_ARGS+=("$TF_PLANFILE")
        PLANDESTROY_ARGS+=("-out=$TF_DESTROY_PLANFILE")
        DESTROY_ARGS+=("$TF_DESTROY_PLANFILE")
    fi
    if [ ${#BACKENDVARFILE_ARG[@]} -lt 1 ] ; then
        echo "$0: WARNING: No -b option passed! Potentially using only local state."
        echo ""
        sleep 1
        INIT_ARGS+=("-reconfigure" "-force-copy")
    else
        INIT_ARGS+=("-reconfigure" "-force-copy" "${BACKENDVARFILE_ARG[@]}")
    fi
}
_load_conf () {
    # Don't load the default configs if one was passed via '-c'
    if [ ${#CONF_FILE[@]} -lt 1 ] ; then
        for f in "/etc/terraformsh" ~/.terraformshrc "./.terraformshrc" "terraformsh.conf" ; do
            [ -r "$f" ] && . "$f"
        done
    # If '-c' was passed, let the user pass only the configs they want to load.
    elif [ ${#CONF_FILE[@]} -gt 0 ] ; then
        for conf in "${CONF_FILE[@]}" ; do
            # NOTE: This is not a replacement for 'readlink -f'; if you want
            # that behavior, pass the real file path yourself, don't rely on this.
            . "$(readlinkf "$conf")"
        done
    fi
    return 0
}
_load_parent_tffiles () {
    if [ "${INHERIT_TFFILES:-0}" = "1" ] ; then
        while read -r LINE ; do VARFILE_ARG+=("-var-file" "$LINE") ; done < <( _rfindfiles "terraform.sh.tfvars" )
        while read -r LINE ; do VARFILE_ARG+=("-var-file" "$LINE") ; done < <( _rfindfiles "terraform.sh.tfvars.json" )
        while read -r LINE ; do BACKENDVARFILE_ARG+=("-backend-config" "$LINE") ; done < <( _rfindfiles "backend.sh.tfvars" )
    fi
}
_process_cmds () {
    declare -a tmpcmds=()
    for cmd in "${CMDS[@]}" ; do
        # If a config file (*.backend.tfvars, *.backend, *.tfvars, *.tfvars.json) was 
        # passed without the '-b' or '-f' option, add the correct options to use them
        if [ $(expr "$cmd" : ".*\.backend\.tfvars$") -ne 0 -o $(expr "$cmd" : ".*\.backend$") -ne 0 ] ; then
            BACKENDVARFILE_ARG+=("-backend-config" "$(readlinkf "$cmd")")
        elif [ $(expr "$cmd" : ".*\.tfvars$") -ne 0 -o $(expr "$cmd" : ".*\.tfvars\.json$") -ne 0 ] ; then
            VARFILE_ARG+=("-var-file" "$(readlinkf "$cmd")")
        else
            valid_cmd=0
            for possiblecmd in "${TF_COMMANDS[@]}" "${WRAPPER_COMMANDS[@]}" ; do
                if [ "$possiblecmd" = "$cmd" ] ; then
                  tmpcmds+=("$cmd") ; valid_cmd=1 ; break
                fi
            done
            if [ $valid_cmd -eq 0 ] ; then
                echo "$0: WARNING: '$cmd' is not a valid command; passing as an option instead"
                OPTS+=("$cmd")
            fi
        fi
    done
    CMDS=("${tmpcmds[@]}")
    if [ ${#CMDS[@]} -lt 1 ] ; then
        echo "$0: Error: No COMMAND was specified"
        echo ""
        _usage
    fi
    if [ ${#CMDS[@]} -gt 1 -a ${#OPTS[@]} -gt 0 ] ; then
        echo "$0: Error: you passed multiple commands with some non-command arguments; you can only pass non-command arguments with a single valid command."
        exit 1
    fi
}
readlinkf () {
    [ "${1:-}" ] || return 1; m_s=40; CDPATH=''; t=$1; [ -e "${t%/}" ] || t=${1%"${1##*[!/]}"}
    [ -d "${t:-/}" ] && t="$t/"; cd -P . 2>/dev/null || return 1; 
    while [ "$m_s" -ge 0 ] && m_s=$((m_s - 1)); do
      if [ ! "$t" = "${t%/*}" ]; then case $t in 
        /*) cd -P "${t%/*}/"  || break ;;
        *) cd -P "./${t%/*}"  || break ;;
        esac; t=${t##*/}; fi
      if [ ! -L "$t" ]; then t="${PWD%/}${t:+/}${t}"; printf '%s\n' "${t:-/}"; return 0; fi
      link=$(ls -dl -- "$t" 2>/dev/null) || break; t=${link#*" $t -> "}
    done; return 1
}
_rfindfiles () {
    local file="$1"
    cwd="$(pwd)"
    while [ ! "$(dirname "$cwd")" = "/" ] ; do
        if [ -r "$cwd/$file" ] ; then
            printf "%s\n" "$cwd/$file"
        fi
        cwd="$(dirname "$cwd")"
    done
}

# ---------------------------------------------------------------------------------------- #
# ------------------           parse cmdline options           --------------------------- #

SHOW_HELP=0
declare -a BACKENDVARFILE_ARG=() VARFILE_ARG=() CMDS=() CD_DIRS=() CONF_FILE=()
declare -a PLAN_ARGS=() APPLY_ARGS=() PLANDESTROY_ARGS=() DESTROY_ARGS=()
declare -a REFRESH_ARGS=() INIT_ARGS=() IMPORT_ARGS=() GET_ARGS=() STATE_ARGS=()

_default_vars

while getopts "f:b:C:c:E:IPhv" args ; do
    case $args in
        f)  VARFILE_ARG+=("-var-file" "$(readlinkf "$OPTARG")") ;;
        b)  BACKENDVARFILE_ARG+=("-backend-config" "$(readlinkf "$OPTARG")") ;;
        C)  CD_DIRS+=("$OPTARG") ;;
        c)  CONF_FILE+=("$OPTARG") ;;
        E)  eval "$OPTARG" ;;
        I)  INHERIT_TFFILES=0 ;;
        P)  USE_PLANFILE=0 ;;
        h)  SHOW_HELP=1 ;;
        v)  export DEBUG=1 ;;
        *)
            echo "$0: Error: unknown option $args" ;
            exit 1 ;;
    esac
done
shift $(($OPTIND-1))

[ $SHOW_HELP -eq 1 ] && _usage

# ---------------------------------------------------------------------------------------- #
# --------------------         run the commands            ------------------------------- #

[ "${DEBUG:-0}" = "1" ] && set -x

_load_parent_tffiles
_load_conf

[ ${#CMDS[@]} -eq 0 ] && CMDS=("$@")

declare -a OPTS=()
_process_cmds

# Change to directories
for dir in "${CD_DIRS[@]}" ; do
    printf "+ cd \"%s\"\n" "$dir" 1>&2
    cd "$dir"
done

_final_vars

for name in "${CMDS[@]}" ; do
    _cmd_"$name" "${OPTS[@]}"
done
